import 'package:tflite_flutter/tflite_flutter.dart';

class TensorFlowModel {
  static late Interpreter _interpreter;

  // Load model from assets
  static Future<void> loadModel() async {
    try {
      // Loading the model from the assets folder
      _interpreter = await Interpreter.fromAsset('assets/model.tflite');
      print("Model loaded successfully!");
    } catch (e) {
      print("Error loading model: $e");
    }
  }

  // Prediction method
  static Future<List<dynamic>> predict(List<dynamic> input) async {
    try {
      // The output list will depend on the model's output shape
      var output = List.filled(1, 0); // Modify the size of this based on your model's output
      _interpreter.run(input, output);
      return output;
    } catch (e) {
      print("Error during prediction: $e");
      return [];
    }
  }

  // Close the interpreter when done
  static void close() {
    _interpreter.close();
  }
}
